{
  "language": "Solidity",
  "sources": {
    "contracts/YourContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract YourContract {\r\n    // Event definitions\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Variables\r\n    string public name = \"NonTransferableNFT\";\r\n    string public symbol = \"NTNFT\";\r\n\r\n    uint256 public tokenCounter;\r\n\r\n    // Mapping from tokenId to owner\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from tokenId to approved address (not used but kept for compatibility)\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Constructor\r\n    constructor() {\r\n        tokenCounter = 0;\r\n    }\r\n\r\n    // Mint function, anyone can call\r\n    function mint() public {\r\n        uint256 tokenId = tokenCounter;\r\n        _owners[tokenId] = msg.sender;\r\n        _balances[msg.sender] += 1;\r\n        tokenCounter += 1;\r\n\r\n        emit Transfer(address(0), msg.sender, tokenId);\r\n    }\r\n\r\n    // Function to query the owner of a token\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"Token does not exist\");\r\n        return owner;\r\n    }\r\n\r\n    // Function to query the balance of an address\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"Address cannot be zero\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    // Disable transfer functions\r\n    function transferFrom(address, address, uint256) public pure {\r\n        revert(\"This NFT is non-transferable\");\r\n    }\r\n\r\n    function safeTransferFrom(address, address, uint256) public pure {\r\n        revert(\"This NFT is non-transferable\");\r\n    }\r\n\r\n    function safeTransferFrom(address, address, uint256, bytes memory) public pure {\r\n        revert(\"This NFT is non-transferable\");\r\n    }\r\n\r\n    // Disable approval functions\r\n    function approve(address, uint256) public pure {\r\n        revert(\"Approval is not allowed\");\r\n    }\r\n\r\n    function setApprovalForAll(address, bool) public pure {\r\n        revert(\"Approval is not allowed\");\r\n    }\r\n\r\n    function getApproved(uint256) public pure returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    function isApprovedForAll(address, address) public pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    // Burn function\r\n    function burn(uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(msg.sender == owner, \"You are not the owner of this NFT\");\r\n\r\n        // Clear ownership and balance\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    // ERC165 interface support\r\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n        return\r\n            interfaceId == 0x80ac58cd || // ERC721 interface ID\r\n            interfaceId == 0x5b5e139f;   // ERC721Metadata interface ID\r\n    }\r\n\r\n    // Metadata function\r\n    function tokenURI(uint256) public pure returns (string memory) {\r\n        return \"\";\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}